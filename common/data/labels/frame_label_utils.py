'''
Utilities for dealing with labelling frames of videos.
Want to give one single classification value to the video frame.
'''

# include standard modules
import argparse
import os.path
import pandas as pd
from pathlib import Path
import time

# video tools
import cv2


def get_frames(VIDEO_URLS,
               LABEL_COLNAME = "label",
               FRAME_COLNAME = "frame",
               DEFAULT_LABEL="NA",
               PAD = 7):
    '''
    Given a pandas dataframe containing locations of videos,
    create a new dataframe with an identifier for frames and labels
    '''
    FRAME_URLS = []
    for video_url in VIDEO_URLS:
        video = cv2.VideoCapture(video_url)
        num_frames = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
        FRAME_URLS.extend(["{}_{}".format(video_url, str(i).rjust(PAD, '0')) for i in range(num_frames) ])
    # now convert to dataframe
    frames_df = pd.DataFrame(FRAME_URLS,
                                    columns = [FRAME_COLNAME])
    frames_df[LABEL_COLNAME] = DEFAULT_LABEL
    return frames_df



def generate_frame_labels(VIDEO_URLS_FILE_LOC,
                          VIDEO_URLS_FILE_LOC_COLNAME,
                          OUT_LOC,
                          OUT_LOC_LABEL_COLNAME = "label",
                          OUT_LOC_FRAME_COLNAME = "frame",
                          PAD = 7):
    '''
    This function checks the existence of a frame labels file at OUT_LOC.
        - If OUT_LOC already exists,
            Append any new frames to the file as rows.
            Frames are generated from videos in file VIDEO_URLS_FILE_LOC
            VIDEO_URLS_FILE_LOC should have been generated by
            common.data.labels.generate_index

        - If OUT_LOC does not exist, it will create the csv file at OUT_LOC
            Append frames to the file as rows.
            Frames are generated from videos in file VIDEO_URLS_FILE_LOC
            VIDEO_URLS_FILE_LOC should have been generated by
            common.data.labels.generate_index
    '''
    # get the new frames
    new_frames_df = get_frames(pd.read_csv(VIDEO_URLS_FILE_LOC).loc[:,VIDEO_URLS_FILE_LOC_COLNAME],
                               LABEL_COLNAME = OUT_LOC_LABEL_COLNAME,
                               FRAME_COLNAME = OUT_LOC_FRAME_COLNAME,
                               PAD = PAD)
    # append the frames if they exist
    if os.path.isfile(OUT_LOC):
        print ("{} already exists.".format(OUT_LOC))
        current_frames_df = pd.read_csv(OUT_LOC)
        # concatenate to join both old and new
        concat_gap_video_loc = pd.concat([current_frames_df, new_frames_df])\
                                    .drop_duplicates()\
                                    .reset_index(drop=True)
        concat_gap_video_loc.to_csv(OUT_LOC,
                                    index = False)
        print("Successfully updated csv file at {}".format(OUT_LOC))


    else:
        print ("Output file does not exist.")
        new_frames_df.to_csv(OUT_LOC,
                            index = False)
        print("Successfully created csv file at {}".format(OUT_LOC))

if __name__ == "__main__":
    # initiate the parser
    parser = argparse.ArgumentParser()

    # add arguments
    parser.add_argument("VIDEO_URLS_FILE_LOC", help="file which contains the locations of .mp4  files. \nMust be generated by common.data.labels.generate_index")
    parser.add_argument("VIDEO_URLS_FILE_LOC_COLNAME", help="column containing the locations of the .mp4 files \nMust be generated by common.data.labels.generate_index")
    parser.add_argument("OUT_LOC", help="location of the .csv file to store frame index in. \nMust give full address")
    parser.add_argument("--OUT_LOC_LABEL_COLNAME",
                        help="Name of column used in csv to store the label of the frames",
                        default="label")
    parser.add_argument("--OUT_LOC_FRAME_COLNAME",
                        help="Name of column used in csv to store the frame locations",
                        default="frame")
    parser.add_argument("--PAD",
                        help="Number of digits to pad the frame number to. Padded with zeroes by default.",
                        default=7)
    # read arguments from the command line
    args = parser.parse_args()

    generate_frame_labels(VIDEO_URLS_FILE_LOC = args.VIDEO_URLS_FILE_LOC,
                          VIDEO_URLS_FILE_LOC_COLNAME = args.VIDEO_URLS_FILE_LOC_COLNAME,
                          OUT_LOC = args.OUT_LOC,
                          OUT_LOC_LABEL_COLNAME = args.OUT_LOC_LABEL_COLNAME,
                          OUT_LOC_FRAME_COLNAME = args.OUT_LOC_FRAME_COLNAME,
                          PAD = args.PAD)
